name: Build

on:
  push:
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-22.04
    env:
      node_version: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
      - run: npm install prettier@^3.3.3
      - run: npm run test:codestyle
  build-musl-arm:
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        node: [17.6.0, 18.8.0, 19.0.0, 20.0.0, 21.0.0, 22.0.0, 23.0.0]
        include:
          - architecture: arm64
            architecture_node: x64
            target_architecture: arm64
            extra_compile_flags: -march=armv8-a
          - python_version: 3
    runs-on: ubuntu-latest
    container:
      image: dockcross/linux-arm64-musl
      credentials:
        username: "${{ secrets.DOCKER_USERNAME }}"
        password: "${{ secrets.DOCKER_PASSWORD }}"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.architecture_node }}
      - run: apt-get install -y python${{ matrix.python_version }}
      - run: node --version
      - run: npm --version
      - run: chmod 0777 tests/output/
      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-musl-arm-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm install --build-from-source
        env:
          npm_config_arch: ${{ matrix.architecture }}
          npm_config_target_arch: ${{ matrix.target_architecture }}
          CFLAGS: ${{ matrix.extra_compile_flags }}
          CPPFLAGS: ${{ matrix.extra_compile_flags }}
          EXTRA_NODE_PRE_GYP_FLAGS: --target_libc=musl
          npm_config_unsafe_perm: true
      # - run: npm run test, this is not an arm64 machine so we can not test.
      - run: ./node_modules/.bin/node-pre-gyp package --target_libc=musl  --target_arch=${{ matrix.target_architecture }}
      - uses: actions/upload-artifact@v4
        with:
          path: build/stage/julianhille/MuhammaraJS/releases/download/**/*.gz
          name: bindings-node-musl-arm-${{ matrix.node }}
          if-no-files-found: error
  build-musl:
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        node: [17.6.0, 18.8.0, 19.0.0, 20.0.0, 21.0.0, 22.0.0, 23.0.0]
        include:
          - python_version: 3
    runs-on: ubuntu-latest
    container:
      image: node:${{ matrix.node }}-alpine
      credentials:
        username: "${{ secrets.DOCKER_USERNAME }}"
        password: "${{ secrets.DOCKER_PASSWORD }}"
    steps:
      - uses: actions/checkout@v4
      - run: apk update
      - run: apk add --no-cache make gcc jq g++ python${{ matrix.python_version }} tar
      - run: node --version
      - run: npm --version
      - run: chmod 0777 tests/output/
      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-musl-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm install --build-from-source
        env:
          EXTRA_NODE_PRE_GYP_FLAGS: --target_libc=musl
          npm_config_unsafe_perm: true
      - run: npm run test
      - run: ./node_modules/.bin/node-pre-gyp package testpackage --target_libc=musl
      - uses: actions/upload-artifact@v4
        with:
          path: build/stage/julianhille/MuhammaraJS/releases/download/**/*.gz
          name: bindings-node-musl-${{ matrix.node }}
          if-no-files-found: error
  build-electron:
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-13, windows-2019]
        architecture: [x64, ia32, arm64]
        electron:
          [
            32.0.0,
            32.1.0,
            32.2.0,
            31.0.0,
            31.1.0,
            31.2.0,
            31.3.0,
            31.4.0,
            31.5.0,
            31.6.0,
            30.0.0,
            30.1.0,
            30.2.0,
            30.3.0,
            30.4.0,
            30.5.0,
            29.0.0,
            29.1.0,
            29.2.0,
            29.3.0,
            29.4.0,
          ]
        include:
          - electron_mocha_version: ^13
            python_version: "3.10"
          - architecture: arm64
            architecture_node: x64
            target_architecture: arm64
            extra_compile_flags: -arch arm64
          - architecture: ia32
            architecture_node: x86
            target_architecture: ia32
          - architecture: x64
            architecture_node: x64
            target_architecture: x64
          - electron: 32.2.0
            node: 20.16.0
          - electron: 32.1.0
            node: 20.16.0
          - electron: 32.0.0
            node: 20.16.0
          - electron: 31.6.0
            node: 20.16.0
          - electron: 31.5.0
            node: 20.16.0
          - electron: 31.4.0
            node: 20.16.0
          - electron: 31.3.0
            node: 20.16.0
          - electron: 31.2.0
            node: 20.16.0
          - electron: 31.1.0
            node: 20.16.0
          - electron: 31.0.0
            node: 20.16.0
          - electron: 30.5.0
            node: 20.15.1
          - electron: 30.4.0
            node: 20.15.1
          - electron: 30.3.0
            node: 20.15.1
          - electron: 30.2.0
            node: 20.15.1
          - electron: 30.1.0
            node: 20.15.1
          - electron: 30.0.0
            node: 20.15.1
          - electron: 29.4.0
            node: 20.9.0
          - electron: 29.3.0
            node: 20.9.0
          - electron: 29.2.0
            node: 20.9.0
          - electron: 29.1.0
            node: 20.9.0
          - electron: 29.0.0
            node: 20.9.0
        exclude:
          - os: macos-13
            architecture: ia32
          - os: ubuntu-20.04
            architecture: arm64
          - os: windows-2019
            architecture: arm64
          - os: ubuntu-20.04
            architecture: ia32
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 11
          platform: ${{matrix.architecture}}
        if: ${{ matrix.os == 'ubuntu-20.04' }}
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.architecture_node }}
      - run: node --version
      - run: npm --version
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-electron-${{ matrix.target_architecture }}-${{ matrix.architecture }}-${{ matrix.electron }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm install --build-from-source
        env:
          npm_config_arch: ${{ matrix.architecture }}
          npm_config_msbuild_path: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
          npm_config_target_arch: ${{ matrix.target_architecture }}
          npm_config_target: ${{ matrix.electron }}
          npm_config_disturl: https://artifacts.electronjs.org/headers/dist
          npm_config_runtime: electron
          npm_config_python: python${{ matrix.python_version }}
          CFLAGS: ${{ matrix.extra_compile_flags }}
          CPPFLAGS: ${{ matrix.extra_compile_flags }}
      - uses: Wandalen/wretry.action@v3
        with:
          command: npm install -g electron@${{ matrix.electron }} electron-mocha@${{ matrix.electron_mocha_version }}
          attempt_limit: 3
          attempt_delay: 10000
      - name: Run test
        uses: coactions/setup-xvfb@90473c3ebc69533a1a6e0505c36511b69c8c3135
        with:
          run: npm run test:electron
        if: ${{ matrix.target_architecture != 'arm64' }}
      - run: ./node_modules/.bin/node-pre-gyp package testpackage
        env:
          npm_config_runtime: electron
          npm_config_target: ${{ matrix.electron }}
        if: ${{ matrix.target_architecture != 'arm64' }}
      - run: ./node_modules/.bin/node-pre-gyp package --target_arch=${{ matrix.target_architecture }}
        if: ${{ matrix.target_architecture == 'arm64' }}
        env:
          npm_config_runtime: electron
          npm_config_target: ${{ matrix.electron }}
      - uses: actions/upload-artifact@v4
        with:
          path: build/stage/julianhille/MuhammaraJS/releases/download/**/*.gz
          name: bindings-electron-${{ matrix.os }}-${{ matrix.target_architecture }}-${{matrix.electron}}
          if-no-files-found: error
  build-electron-outdated:
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-13, windows-2019]
        architecture: [x64, ia32, arm64]
        electron:
          [
            28.0.0,
            28.1.0,
            28.2.0,
            28.3.0,
            27.0.0,
            27.1.0,
            27.2.0,
            27.3.0,
            26.0.0,
            26.1.0,
            26.2.0,
            26.3.0,
            26.4.0,
            26.5.0,
            26.6.0,
            25.9.0,
            25.8.0,
            25.7.0,
            25.6.0,
            25.5.0,
            25.4.0,
            25.3.0,
            25.2.0,
            25.1.0,
            25.0.0,
            24.8.0,
            24.7.0,
            24.6.0,
            24.5.0,
            24.4.0,
            24.3.0,
            24.2.0,
            24.1.0,
            24.0.0,
          ]
        include:
          - electron_mocha_version: ^13
            python_version: "3.10"
          - architecture: arm64
            architecture_node: x64
            target_architecture: arm64
            extra_compile_flags: -arch arm64
          - architecture: ia32
            architecture_node: x86
            target_architecture: ia32
          - architecture: x64
            architecture_node: x64
            target_architecture: x64
          - electron: 28.3.0
            node: 18.18.2
          - electron: 28.2.0
            node: 18.18.2
          - electron: 28.1.0
            node: 18.18.2
          - electron: 28.0.0
            node: 18.18.2
          - electron: 27.3.0
            node: 18.17.1
          - electron: 27.2.0
            node: 18.17.1
          - electron: 27.1.0
            node: 18.17.1
          - electron: 27.0.0
            node: 18.17.1
          - electron: 26.6.0
            node: 18.16.0
          - electron: 26.5.0
            node: 18.16.0
          - electron: 26.4.0
            node: 18.16.0
          - electron: 26.3.0
            node: 18.16.0
          - electron: 26.2.0
            node: 18.16.0
          - electron: 26.1.0
            node: 18.16.0
          - electron: 26.0.0
            node: 18.16.0
          - electron: 25.9.0
            node: 18.15.0
          - electron: 25.8.0
            node: 18.15.0
          - electron: 25.7.0
            node: 18.15.0
          - electron: 25.6.0
            node: 18.15.0
          - electron: 25.5.0
            node: 18.15.0
          - electron: 25.4.0
            node: 18.15.0
          - electron: 25.3.0
            node: 18.15.0
          - electron: 25.2.0
            node: 18.15.0
          - electron: 25.1.0
            node: 18.15.0
          - electron: 25.0.0
            node: 18.15.0
          - electron: 24.8.0
            node: 18.14.0
          - electron: 24.7.0
            node: 18.14.0
          - electron: 24.6.0
            node: 18.14.0
          - electron: 24.5.0
            node: 18.14.0
          - electron: 24.4.0
            node: 18.14.0
          - electron: 24.3.0
            node: 18.14.0
          - electron: 24.2.0
            node: 18.14.0
          - electron: 24.1.0
            node: 18.14.0
          - electron: 24.0.0
            node: 18.14.0
        exclude:
          - os: macos-13
            architecture: ia32
          - os: ubuntu-20.04
            architecture: arm64
          - os: windows-2019
            architecture: arm64
          - os: ubuntu-20.04
            architecture: ia32
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 11
          platform: ${{matrix.architecture}}
        if: ${{ matrix.os == 'ubuntu-20.04' }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.architecture_node }}
      - run: node --version
      - run: npm --version
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-electron-${{ matrix.target_architecture }}-${{ matrix.architecture }}-${{ matrix.electron }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm install --build-from-source
        env:
          npm_config_arch: ${{ matrix.architecture }}
          npm_config_msbuild_path: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
          npm_config_target_arch: ${{ matrix.target_architecture }}
          npm_config_target: ${{ matrix.electron }}
          npm_config_disturl: https://artifacts.electronjs.org/headers/dist
          npm_config_runtime: electron
          npm_config_python: python${{ matrix.python_version }}
          CFLAGS: ${{ matrix.extra_compile_flags }}
          CPPFLAGS: ${{ matrix.extra_compile_flags }}
      - uses: Wandalen/wretry.action@v3
        with:
          command: npm install -g electron@${{ matrix.electron }} electron-mocha@${{ matrix.electron_mocha_version }}
          attempt_limit: 3
          attempt_delay: 10000
      - name: Run test
        uses: coactions/setup-xvfb@90473c3ebc69533a1a6e0505c36511b69c8c3135
        with:
          run: npm run test:electron
        if: ${{ matrix.target_architecture != 'arm64' }}
      - run: ./node_modules/.bin/node-pre-gyp package testpackage
        env:
          npm_config_runtime: electron
          npm_config_target: ${{ matrix.electron }}
        if: ${{ matrix.target_architecture != 'arm64' }}
      - run: ./node_modules/.bin/node-pre-gyp package --target_arch=${{ matrix.target_architecture }}
        if: ${{ matrix.target_architecture == 'arm64' }}
        env:
          npm_config_runtime: electron
          npm_config_target: ${{ matrix.electron }}
      - uses: actions/upload-artifact@v4
        with:
          path: build/stage/julianhille/MuhammaraJS/releases/download/**/*.gz
          name: bindings-electron-${{ matrix.os }}-${{ matrix.target_architecture }}-${{matrix.electron}}
          if-no-files-found: error
  build-node-linux:
    needs: [lint]
    runs-on: ubuntu-20.04
    container:
      image: gcc:11-bullseye
      credentials:
        username: "${{ secrets.DOCKER_USERNAME }}"
        password: "${{ secrets.DOCKER_PASSWORD }}"
    strategy:
      fail-fast: false
      matrix:
        node: [17.6.0, 18.8.0, 19.0.0, 20.0.0, 21.7.3, 22.9.0, 23.0.0]
        include:
          - architecture: x64
            python_version: "3.10"
            architecture_node: x64
            target_architecture: x64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.architecture_node }}
      - run: node --version
      - run: npm --version
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ matrix.architecture }}-${{ matrix.target_architecture }}-${{matrix.node}}-${{ hashFiles('**/package-lock.json') }}
      - run: npm install --build-from-source
        env:
          npm_config_arch: ${{ matrix.architecture }}
          npm_config_target_arch: ${{ matrix.target_architecture }}
          npm_config_python: python${{ matrix.python_version }}
          npm_config_msbuild_path: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
          CFLAGS: ${{ matrix.extra_compile_flags }}
          CPPFLAGS: ${{ matrix.extra_compile_flags }}
      - run: ./node_modules/.bin/node-pre-gyp package testpackage
      - uses: actions/upload-artifact@v4
        with:
          path: build/stage/julianhille/MuhammaraJS/releases/download/**/*.gz
          name: bindings-electron-${{ matrix.os }}-${{ matrix.target_architecture }}-${{matrix.node}}
          if-no-files-found: error
  build-node:
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, windows-2019]
        node: [17.6.0, 18.8.0, 19.0.0, 20.0.0, 21.7.3, 22.9.0, 23.0.0]
        architecture: [x64, ia32, arm64]
        include:
          - python_version: "3.10"
          - architecture: ia32
            architecture_node: x86
            target_architecture: ia32
          - architecture: x64
            architecture_node: x64
            target_architecture: x64
          - architecture: arm64
            architecture_node: x64
            target_architecture: arm64
            extra_compile_flags: -arch arm64
            EXTRA_NODE_PRE_GYP_FLAGS: --target_arch=arm64
        exclude:
          - os: windows-2019
            architecture: arm64
          - os: macos-13
            architecture: ia32
          - os: windows-2019
            architecture: ia32
            node: 23.0.0
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.architecture_node }}
      - run: node --version
      - run: npm --version
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ matrix.architecture }}-${{ matrix.target_architecture }}-${{matrix.node}}-${{ hashFiles('**/package-lock.json') }}
      - run: npm install --build-from-source
        env:
          npm_config_arch: ${{ matrix.architecture }}
          npm_config_target_arch: ${{ matrix.target_architecture }}
          npm_config_python: python${{ matrix.python_version }}
          npm_config_msbuild_path: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe'
          CFLAGS: ${{ matrix.extra_compile_flags }}
          CPPFLAGS: ${{ matrix.extra_compile_flags }}
      - run: ./node_modules/.bin/node-pre-gyp package testpackage
        if: ${{ matrix.target_architecture != 'arm64' }}
      - run: ./node_modules/.bin/node-pre-gyp package --target_arch=${{ matrix.target_architecture }}
        if: ${{ matrix.target_architecture == 'arm64' }}
      - uses: actions/upload-artifact@v4
        with:
          path: build/stage/julianhille/MuhammaraJS/releases/download/**/*.gz
          name: bindings-electron-${{ matrix.os }}-${{ matrix.target_architecture }}-${{matrix.node}}
          if-no-files-found: error
  publish:
    needs:
      [
        build-musl,
        build-musl-arm,
        build-electron,
        build-electron-outdated,
        build-node,
      ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 10
      - uses: actions/download-artifact@v4
        with:
          pattern: bindings-*
          path: builds/bindings
        id: upload-release-asset
      - run: ls -lah builds/bindings/
      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ github.ref }}
          version_extractor_regex: 'tags\/(.*)$'
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.semver_parser.outputs.fullversion }}
          release_name: ${{ steps.semver_parser.outputs.fullversion }}
          draft: false
          prerelease: steps.semver_parser.outputs.prerelease != []
      - uses: AButler/upload-release-assets@v2.0
        with:
          files: "builds/bindings/**/*"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ steps.semver_parser.outputs.fullversion }}
      - run: npm install
      - uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
