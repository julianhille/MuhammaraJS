name: Build

on:
  push:
    tags:
      - '1.*'
      - '2.*'
    branches:
  pull_request:
  workflow_dispatch:

jobs:
  build-musl:
    strategy:
      fail-fast: false
      matrix:
        node: [8.11.0, 9.11.1, 10.8.0, 11.2.0, 12.0.0, 13.14.0, 14.0.0, 15.7.0, 16.11.1, 17.6.0]
        include:
          - python_version: 3
            node: 16.11.1
          - python_version: 3
            node: 17.6.0
    runs-on: ubuntu-latest
    container:
      image: node:${{ matrix.node }}-alpine
      credentials:
        username: "${{ secrets.DOCKER_USERNAME }}"
        password: "${{ secrets.DOCKER_PASSWORD }}"
    steps:
      - uses: actions/checkout@v2
      - run: apk update
      - run: apk add --no-cache make gcc jq g++ python${{ matrix.python_version }} tar
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - run: npm config set unsafe-perm true
      - run: npm -g install npm@^6.14.5
      - run: node --version
      - run: npm --version
      - run: npm install node-gyp@5.1.1 --global
      - run: chmod 0777 tests/output/
      - run: npm install --build-from-source
        env:
          EXTRA_NODE_PRE_GYP_FLAGS: --target_libc=musl
      - run: npm run test
      - run: ./node_modules/.bin/node-pre-gyp package testpackage --target_libc=musl
      - uses: actions/upload-artifact@v2
        with:
          path: build/stage/julianhille/MuhammaraJS/releases/download/**/*.gz
          name: bindings
          if-no-files-found: error
  build-aws-node:
    strategy:
      fail-fast: false
      matrix:
        node: [10, 12, 14, 16]
    runs-on: ubuntu-latest
    container:
      image: amazon/aws-lambda-nodejs:${{ matrix.node }}
      credentials:
        username: "${{ secrets.DOCKER_USERNAME }}"
        password: "${{ secrets.DOCKER_PASSWORD }}"
    steps:
      - run: yum -y update
      - run: yum -y install gcc-c++ make
      - run: yum -y install tar gzip
      - uses: actions/checkout@v2

      - run: npm -g install npm@6.14.5
      - run: npm install node-gyp@5.1.1 --global
      - run: npm install --build-from-source
      - run: npx node-pre-gyp rebuild
      - run: npm run test
      - run: npx node-pre-gyp package testpackage --target_platform=amz-lambda-linux
      - uses: actions/upload-artifact@v2
        with:
          path: build/stage/julianhille/MuhammaraJS/releases/download/**/*.gz
          name: bindings
          if-no-files-found: error
  build-electron:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-11, windows-2019]
        architecture: [x64, ia32, arm64]
        electron: [19.0.0, 18.3.0, 18.2.0, 18.1.0, 18.0.0, 17.1.0, 17.0.0, 16.0.1, 15.3.0, 15.2.0, 15.1.2, 15.0.0, 14.2.0, 14.1.0, 14.0.1, 13.6.0, 13.5.0, 13.4.0, 13.3.0, 13.2.3, 13.1.0, 13.0.0, 12.0.0, 11.4.7, 11.3.0, 11.2.0, 11.1.0, 11.0.0, 10.4.7, 10.3.2, 10.2.0, 10.1.3, 10.0.0, 9.4.4, 9.3.5, 9.2.0, 9.1.2, 9.0.0, 8.5.2, 8.4.1, 8.3.4, 8.2.5, 8.1.1, 8.0.3, 7.3.3, 7.2.4, 7.1.14, 6.1.10, 6.0.2, 5.0.9, 4.2.8, 4.1.5, 4.0.8, 3.0.9]
        include:
          - electron_mocha_version: ^10
          - electron_mocha_version: ^8
            electron: 3.0.9
          - architecture: arm64
            architecture_node: x64
            target_architecture: arm64
            extra_compile_flags: -arch arm64
          - architecture: ia32
            architecture_node: x86
            target_architecture: ia32
          - architecture: x64
            architecture_node: x64
            target_architecture: x64
          - architecture: x64
            node: 16.13.2
          - electron: 19.0.0
            node: 16.14.2
          - electron: 18.3.0
            node: 16.13.2
          - electron: 18.2.0
            node: 16.13.2
          - electron: 18.1.0
            node: 16.13.2
          - electron: 18.0.0
            node: 16.13.2
          - electron: 17.1.0
            node: 16.13.0
          - electron: 17.0.0
            node: 16.13.0
          - electron: 16.0.1
            node: 16.9.1
          - electron: 15.3.0
            node: 16.5.0
          - electron: 15.2.0
            node: 16.5.0
          - electron: 15.1.2
            node: 16.5.0
          - electron: 15.0.0
            node: 16.5.0
          - electron: 14.2.0
            node: 14.17.0
          - electron: 14.1.0
            node: 14.17.0
          - electron: 14.0.1
            node: 14.17.0
          - electron: 13.6.0
            node: 14.17.0
          - electron: 13.5.0
            node: 14.17.0
          - electron: 13.4.0
            node: 14.17.0
          - electron: 13.3.0
            node: 14.17.0
          - electron: 13.2.3
            node: 14.17.0
          - electron: 13.1.0
            node: 14.17.0
          - electron: 13.0.0
            node: 14.17.0
          - electron: 12.0.0
            node: 14.16.0
          - electron: 11.4.7
            node: 12
          - electron: 11.3.0
            node: 12
          - electron: 11.2.0
            node: 12
          - electron: 11.1.0
            node: 12
          - electron: 11.0.0
            node: 12
          - electron: 10.4.7
            node: 12
          - electron: 10.3.2
            node: 12
          - electron: 10.2.0
            node: 12
          - electron: 10.1.3
            node: 12
          - electron: 10.0.0
            node: 12
          - electron: 9.4.4
            node: 12
          - electron: 9.3.5
            node: 12
          - electron: 9.2.0
            node: 12
          - electron: 9.1.2
            node: 12
          - electron: 9.0.0
            node: 12
          - electron: 8.5.2
            node: 12
          - electron: 8.4.1
            node: 12
          - electron: 8.3.4
            node: 12
          - electron: 8.2.5
            node: 12
          - electron: 8.1.1
            node: 12
          - electron: 8.0.3
            node: 12
          - electron: 7.3.3
            node: 12
          - electron: 7.2.4
            node: 12
          - electron: 7.1.14
            node: 12
          - electron: 6.1.10
            node: 12
          - electron: 6.0.2
            node: 12
          - electron: 5.0.9
            node: 10
          - electron: 4.2.8
            node: 10
          - electron: 4.1.5
            node: 10
          - electron: 4.0.8
            node: 10
          - electron: 3.0.9
            node: 8
        exclude:
          - os: macos-11
            architecture: ia32
          - os: ubuntu-18.04
            architecture: arm64
          - os: windows-2019
            architecture: arm64
          - os: ubuntu-18.04
            architecture: ia32
          - architecture: arm64
            electron: 11.4.7
          - architecture: arm64
            electron: 11.3.0
          - architecture: arm64
            electron: 11.2.0
          - architecture: arm64
            electron: 11.1.0
          - architecture: arm64
            electron: 11.0.0
          - architecture: arm64
            electron: 10.4.7
          - architecture: arm64
            electron: 10.3.2
          - architecture: arm64
            electron: 10.2.0
          - architecture: arm64
            electron: 10.1.3
          - architecture: arm64
            electron: 10.0.0
          - architecture: arm64
            electron: 9.4.4
          - architecture: arm64
            electron: 9.3.5
          - architecture: arm64
            electron: 9.2.0
          - architecture: arm64
            electron: 9.1.2
          - architecture: arm64
            electron: 9.0.0
          - architecture: arm64
            electron: 8.5.2
          - architecture: arm64
            electron: 8.4.1
          - architecture: arm64
            electron: 8.3.4
          - architecture: arm64
            electron: 8.2.5
          - architecture: arm64
            electron: 8.1.1
          - architecture: arm64
            electron: 8.0.3
          - architecture: arm64
            electron: 7.3.3
          - architecture: arm64
            electron: 7.2.4
          - architecture: arm64
            electron: 7.1.14
          - architecture: arm64
            electron: 6.1.10
          - architecture: arm64
            electron: 6.0.2
          - architecture: arm64
            electron: 5.0.9
          - architecture: arm64
            electron: 4.2.8
          - architecture: arm64
            electron: 4.1.5
          - architecture: arm64
            electron: 4.0.8
          - architecture: arm64
            electron: 3.0.9
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.architecture_node }}
      - run: npm -g install npm@6.14.5
      - run: node --version
      - run: npm --version
      - run: npm install node-gyp@5.1.1 --global
      - run: npm config set msbuild_path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe"
        if: ${{ runner.os == 'Windows' }}
      - run: npm install --build-from-source
        env:
          npm_config_arch: ${{ matrix.architecture }}
          npm_config_target_arch: ${{ matrix.target_architecture }}
          npm_config_target: ${{ matrix.electron }}
          npm_config_disturl: https://artifacts.electronjs.org/headers/dist
          npm_config_runtime: electron
          CFLAGS: ${{ matrix.extra_compile_flags }}
          CPPFLAGS: ${{ matrix.extra_compile_flags }}
      - uses: Wandalen/wretry.action@v1.0.11
        with:
          command: npm install -g electron@${{ matrix.electron }} electron-mocha@${{ matrix.electron_mocha_version }}
          attempt_limit: 3
          attempt_delay: 10000
      - name: Run test
        uses: GabrielBB/xvfb-action@v1
        with:
          working-directory: ./ #optional
          run: npm run test:electron
        if: ${{ matrix.target_architecture != 'arm64' }}
      - run: ./node_modules/.bin/node-pre-gyp package testpackage
        env:
          npm_config_runtime: electron
          npm_config_target: ${{ matrix.electron }}
        if: ${{ matrix.target_architecture != 'arm64' }}
      - run: ./node_modules/.bin/node-pre-gyp package --target_arch=${{ matrix.target_architecture }}
        if: ${{ matrix.target_architecture == 'arm64' }}
        env:
          npm_config_runtime: electron
          npm_config_target: ${{ matrix.electron }}

      - uses: actions/upload-artifact@v2
        with:
          path: build/stage/julianhille/MuhammaraJS/releases/download/**/*.gz
          name: bindings
          if-no-files-found: error
  build-node:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-11, windows-2019]
        node: [8.11.0, 9.11.1, 10.8.0, 11.2.0, 12.0.0, 13.14.0, 14.0.0, 15.7.0, 16.11.1, 17.6.0]
        architecture: [x64, ia32, arm64]
        include:
          - architecture: ia32
            architecture_node: x86
            target_architecture: ia32
          - architecture: x64
            architecture_node: x64
            target_architecture: x64
          - architecture: arm64
            architecture_node: x64
            target_architecture: arm64
            extra_compile_flags: -arch arm64
        exclude:
          - os: ubuntu-18.04
            architecture: arm64
          - os: windows-2019
            architecture: arm64
          - os: macos-11
            architecture: ia32
          - os: ubuntu-18.04
            architecture: ia32
          - os: macos-11
            node: 6.14.1
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.architecture_node }}
      - run: npm -g install npm@^6.14.5
      - run: node --version
      - run: npm --version
      - run: npm install node-gyp@5.1.1 --global
      - run: npm config set msbuild_path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe"
        if: ${{ runner.os == 'Windows' }}
      - run: npm install --build-from-source
        env:
          npm_config_arch: ${{ matrix.architecture }}
          npm_config_target_arch: ${{ matrix.target_architecture }}
          CFLAGS: ${{ matrix.extra_compile_flags }}
          CPPFLAGS: ${{ matrix.extra_compile_flags }}
      - run: ./node_modules/.bin/node-pre-gyp package testpackage
        if: ${{ matrix.target_architecture != 'arm64' }}
      - run: ./node_modules/.bin/node-pre-gyp package --target_arch=${{ matrix.target_architecture }}
        if: ${{ matrix.target_architecture == 'arm64' }}
      - uses: actions/upload-artifact@v2
        with:
          path: build/stage/julianhille/MuhammaraJS/releases/download/**/*.gz
          name: bindings
          if-no-files-found: error
  publish:
    needs: [build-musl, build-electron, build-node]
    runs-on: ubuntu-latest
    if:  startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 10
      - uses: actions/download-artifact@v2
        with:
          name: bindings
          path: builds/bindings
        id: upload-release-asset
      - run: ls -lah builds/bindings/
      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ github.ref }}
          version_extractor_regex: 'tags\/(.*)$'
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.semver_parser.outputs.fullversion }}
          release_name: ${{ steps.semver_parser.outputs.fullversion }}
          draft: false
          prerelease: steps.semver_parser.outputs.prerelease != []
      - uses: AButler/upload-release-assets@v2.0
        with:
          files: 'builds/bindings/**/*'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ steps.semver_parser.outputs.fullversion }}
      - run: npm install
      - uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
