name: Build

on:
  push:
    tags:
      - '1.*'
      - '2.*'
    branches:
  pull_request:
  workflow_dispatch:

jobs:
  build-node:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        node: [16.11.1, 17.6.0, 18.2.0]
        architecture: [x64, ia32, arm64]
        include:
          - architecture: ia32
            architecture_node: x86
            target_architecture: ia32
          - architecture: x64
            architecture_node: x64
            target_architecture: x64
          - architecture: arm64
            architecture_node: x64
            target_architecture: arm64
            extra_compile_flags: -arch arm64
        exclude:
          - os: ubuntu-18.04
            architecture: arm64
          - os: windows-2019
            architecture: arm64
          - os: macos-11
            architecture: ia32
          - os: ubuntu-18.04
            architecture: ia32
          - os: macos-11
            node: 6.14.1
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.architecture_node }}
      - run: npm -g install npm@^6.14.5
      - run: node --version
      - run: npm --version
      - run: npm install node-gyp@5.1.1 --global
      - run: npm config set msbuild_path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe"
        if: ${{ runner.os == 'Windows' }}
      - run: npm install --build-from-source
        env:
          npm_config_arch: ${{ matrix.architecture }}
          npm_config_target_arch: ${{ matrix.target_architecture }}
          CFLAGS: ${{ matrix.extra_compile_flags }}
          CPPFLAGS: ${{ matrix.extra_compile_flags }}
      - run: ./node_modules/.bin/node-pre-gyp package testpackage
        if: ${{ matrix.target_architecture != 'arm64' }}
      - run: ./node_modules/.bin/node-pre-gyp package --target_arch=${{ matrix.target_architecture }}
        if: ${{ matrix.target_architecture == 'arm64' }}
      - uses: actions/upload-artifact@v2
        with:
          path: build/stage/julianhille/MuhammaraJS/releases/download/**/*.gz
          name: bindings
          if-no-files-found: error
  publish:
    needs: [build-musl, build-electron, build-node]
    runs-on: ubuntu-latest
    if:  startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 10
      - uses: actions/download-artifact@v2
        with:
          name: bindings
          path: builds/bindings
        id: upload-release-asset
      - run: ls -lah builds/bindings/
      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ github.ref }}
          version_extractor_regex: 'tags\/(.*)$'
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.semver_parser.outputs.fullversion }}
          release_name: ${{ steps.semver_parser.outputs.fullversion }}
          draft: false
          prerelease: steps.semver_parser.outputs.prerelease != []
      - uses: AButler/upload-release-assets@v2.0
        with:
          files: 'builds/bindings/**/*'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ steps.semver_parser.outputs.fullversion }}
      - run: npm install
      - uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
